#!groovy
// We need these modules:
//
// We need permisions for several string manipulation operations, like take()
def REGISTRY="192.168.0.1"
def REGISTRY_URL="https://${REGISTRY}/"
// def DOCKER_CONTAINER="debianjessie"

def CONTAINERS=[
// [ 'docker': true,  'name': 'centosix', 'packageFormat': 'RPM'],
// [ 'docker': true,  'name': 'centoseven', 'packageFormat': 'RPM'],
 [ 'docker': true,  'name': 'fedoratwentythree', 'packageFormat': 'RPM'],
// [ 'docker': true,  'name': 'opensusethirteen', 'packageFormat': 'RPM'],
// [ 'docker': true,  'name': 'debianjessie', 'packageFormat': 'DEB'],
// [ 'docker': true,  'name': 'ubuntufourteenofour', 'packageFormat': 'DEB'],
// [ 'docker': true,  'name': 'ubuntusixteenofour', 'packageFormat': 'DEB'],
]

def OS="Linux"
def RELEASE_OUT_DIR="/net/fileserver/"
def LOCAL_TAR_DIR="/mnt/workspace/tmp/"
def branches = [:]
def failures = ""
def paralellJobNames = []
def ADMIN_ACCOUNT = "release-bot@arangodb.com"
def lastKnownGoodGitFile="${RELEASE_OUT_DIR}/${env.JOB_NAME}.githash"
def lastKnownGitRev=""
def currentGitRev=""

def BUILT_FILE = ""
def DIST_FILE = ""
def fatalError = false

echo "bla"
stage("cloning source")
  node {

    sh "mount"
    sh "pwd"
    sh "ls -l /jenkins/workspace"
    sh "cat /etc/issue /jenkins/workspace/issue"
    def someString="1234567890"
    echo someString.take(5)
    
    if (fileExists(lastKnownGoodGitFile)) {
      lastKnownGitRev=readFile(lastKnownGoodGitFile)
    }
    echo "git url: 'https://github.com/arangodb/arangodb.git', tag: ${GITTAG}"

    git url: 'https://github.com/arangodb/arangodb.git', tag: "${GITTAG}"
    sh "git checkout ${GITTAG}"
  }



stage("building ArangoDB")
//try {
  for (int c=0; c < CONTAINERS.size(); c++) {
    echo "building No. ${c}: "
    echo CONTAINERS[c]['name']
    node {
      DOCKER_CONTAINER=CONTAINERS[c]['name']
      PACKAGE_FORMAT=CONTAINERS[c]['packageFormat']
      OUT_DIR = ""
      docker.withRegistry(REGISTRY_URL, '') {
        def myBuildImage=docker.image("${DOCKER_CONTAINER}/build")
        myBuildImage.pull()
        docker.image(myBuildImage.imageName()).inside('--volume /mnt/data/fileserver:/net/fileserver:rw --volume /jenkins:/mnt/:rw ') {
          sh "mount"
          sh "pwd"
          sh "cat /etc/issue /mnt/workspace/issue"

          sh 'pwd > workspace.loc'
          WORKSPACE = readFile('workspace.loc').trim()
          EP=""
          XEP=""
          if (ENTERPRISE_URL.size() > 10) {
            EP="--enterprise ${ENTERPRISE_URL}"
            OUT_DIR = "${RELEASE_OUT_DIR}/EP/${DOCKER_CONTAINER}"
            XEP="EP"
          } else {
            OUT_DIR = "${RELEASE_OUT_DIR}/${DOCKER_CONTAINER}"
          }
          //try {
            sh "./Installation/Jenkins/build.sh standard  --rpath --parallel 8 --buildDir build-${XEP}package-${DOCKER_CONTAINER} --package ${PACKAGE_FORMAT} ${EP} --jemalloc --targetDir ${OUT_DIR} "
          //} catch (err) {
          //  stage('Send Notification for failed build' ) {
          //
          //    mail (to: 'release-bot@arangodb.com',
          //          subject: "Job '${env.JOB_NAME}' (${env.BUILD_NUMBER}) 'building ArangoDB' failed to compile.", 
          //          body: err.getMessage());
          //    currentBuild.result = 'FAILURE'
          //    throw(err)
          //  }
          //}
          sh "ls -l ${OUT_DIR}"
        }
      }
    }
  }
//} catch (err) {
//  stage('Send FAIL-Notification for build' )
//  mail (to: ADMIN_ACCOUNT, 
//        subject: "Job '${env.JOB_NAME}' (${env.BUILD_NUMBER}) 'building ArangoDB' has had a FATAL error.", 
//        body: err.getMessage());
//  currentBuild.result = 'FAILURE'
//  throw(err)
//}

stage("generating test report")
  node {
      
    def subject = "Job '${env.JOB_NAME}' (${env.BUILD_NUMBER}) is finished"
      
    mail (to: 'release-bot@arangodb.com',
          subject: subject,
          body: "we successfully compiled ${GITTAG} \nfind the results at ${env.BUILD_URL}.");
  }

